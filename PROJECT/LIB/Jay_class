class servo():
	def __init__(self,channel,direction,position,old_position):
		self.direction = direction
		self.position = position
		self.old_position= position

class pid():

	"""
	Calculate the pid value with a given error (IT DOESN'T CALCULATE THE ERROR!)
	"""
	def __init__(self, P, I, D, Derivator, Integrator, Integrator_max, Integrator_min):

		self.Kp=P
		self.Ki=I
		self.Kd=D
		self.Derivator=0
		self.Integrator=0
		self.Integrator_max=500
		self.Integrator_min=-500
		self.error=0

	def update(self):
		"""
		Calculate PID output value for given reference input and feedback
		"""

		self.P_value = self.Kp * self.error
		self.D_value = self.Kd * ( self.error - self.Derivator)
		self.Derivator = self.error

		self.Integrator = self.Integrator + self.error

		if self.Integrator > self.Integrator_max:
			self.Integrator = self.Integrator_max
		elif self.Integrator < self.Integrator_min:
			self.Integrator = self.Integrator_min

		self.I_value = self.Integrator * self.Ki

		PID = self.P_value + self.I_value + self.D_value

		return PID

	def finderror(self,current_angle,set_angle):
		"""
		Will work with an angle error 
		"""
		self.error = current_angle - set_point 
		
class imu()
	__init__();
	
		k=0
		if k==0:
			SETTINGS_FILE = "RTIMULib"
		
			print ("Using settings file" +  SETTINGS_FILE +  ".ini")
		
			if not os.path.exists(SETTINGS_FILE + ".ini"):
		
				print("Settings file does not esist, will be created")
		
			s = RTIMU.Settings(SETTINGS_FILE)
			imu = RTIMU.RTIMU(s)
		
			print ("IMU Name : " + imu.IMUName())
		
			if (not imu.IMUInit()):
				print ("IMU Init Failed")
				sys.exit(1)
			else:
				print("IMU Init Succeeded")
		
		# this is a good time to set any fusion parameters 
		
			imu.setSlerpPower(0.02)
			imu.setGyroEnable(True)
			imu.setAccelEnable(True)
			imu.setCompassEnable(True)
		
			poll_interval = imu.IMUGetPollInterval()
			print("Recommended Poll Interval: %dmS\n" % poll_interval)
		
			k=1

		def ReadImu(accel,x):
		
			r=0
			p=0
			y=0
			i=0
			#Faire une moyenne des x  donnÃ©es
			while i < x :
				if imu.IMURead():
			
					data = imu.getIMUData()
					fusionPose = data["fusionPose"]
					"""print("r: %f p: %f y: %f" %(math.degrees(fusionPose[0]),
					math.degrees(fusionPose[1]),math.degrees(fusionPose[2])))"""
			
					r= r+ math.degrees(fusionPose[0])			
					p= p+ math.degrees(fusionPose[1])
					y= y+ math.degrees(fusionPose[2])
					i = i+1
			
		
			accel.roll= r/x
			accel.pitch= p/x
			accel.yaw= y/x
		
			return 1

